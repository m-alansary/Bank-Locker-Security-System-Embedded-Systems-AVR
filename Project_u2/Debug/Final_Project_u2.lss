
Final_Project_u2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002c34  00002ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002640  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dad  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000061dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000634d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a7eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 16 12 	call	0x242c	; 0x242c <main>
      7a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_init>:
#include "external_eeprom.h"
#include "i2c.h"

#define PW_ADDRR 350

void EEPROM_init(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
     b3e:	0e 94 9c 08 	call	0x1138	; 0x1138 <TWI_init>
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_writeByte+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
     b5a:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
	if(TWI_Get_Status() != TW_START)
     b5e:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	11 f0       	breq	.+4      	; 0xb6a <EEPROM_writeByte+0x22>
		return ERROR;
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	28 c0       	rjmp	.+80     	; 0xbba <EEPROM_writeByte+0x72>

	TWI_write((uint8) (0xA0 | ((u16addr & 0x0700) >> 7)));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	80 70       	andi	r24, 0x00	; 0
     b70:	97 70       	andi	r25, 0x07	; 7
     b72:	88 0f       	add	r24, r24
     b74:	89 2f       	mov	r24, r25
     b76:	88 1f       	adc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	91 95       	neg	r25
     b7c:	80 6a       	ori	r24, 0xA0	; 160
     b7e:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_SLA_W_ACK)
     b82:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	11 f0       	breq	.+4      	; 0xb8e <EEPROM_writeByte+0x46>
			return ERROR;
     b8a:	1c 82       	std	Y+4, r1	; 0x04
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <EEPROM_writeByte+0x72>

	TWI_write((uint8) u16addr);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_DATA_ACK)
     b94:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     b98:	88 32       	cpi	r24, 0x28	; 40
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EEPROM_writeByte+0x58>
			return ERROR;
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EEPROM_writeByte+0x72>

	TWI_write(u8data);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_DATA_ACK)
     ba6:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	11 f0       	breq	.+4      	; 0xbb2 <EEPROM_writeByte+0x6a>
			return ERROR;
     bae:	1c 82       	std	Y+4, r1	; 0x04
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <EEPROM_writeByte+0x72>

	TWI_Stop();
     bb2:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_Stop>

	return SUCCESS;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <EEPROM_readByte+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	7c 83       	std	Y+4, r23	; 0x04
     bde:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
     be0:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
	if(TWI_Get_Status() != TW_START)
     be4:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_readByte+0x26>
		return ERROR;
     bec:	1d 82       	std	Y+5, r1	; 0x05
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <EEPROM_readByte+0xae>

	TWI_write((uint8) (0xA0 | ((u16addr & 0x0700) >> 7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_SLA_W_ACK)
     c08:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_readByte+0x4a>
		return ERROR;
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	32 c0       	rjmp	.+100    	; 0xc78 <EEPROM_readByte+0xae>

	TWI_write((uint8) u16addr);
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_DATA_ACK)
     c1a:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_readByte+0x5c>
		return ERROR;
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <EEPROM_readByte+0xae>

	TWI_Start();
     c26:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
	if(TWI_Get_Status() != TW_REP_START)
     c2a:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x6c>
		return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <EEPROM_readByte+0xae>

	TWI_write((uint8) (0xA0 | ((u16addr & 0x0700) >> 7) | 1));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	81 6a       	ori	r24, 0xA1	; 161
     c4a:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_write>
	if(TWI_Get_Status() != TW_MT_SLA_R_ACK)
     c4e:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     c52:	80 34       	cpi	r24, 0x40	; 64
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x90>
		return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <EEPROM_readByte+0xae>

	*u8data = TWI_Read_With_NACK();
     c5a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TWI_Read_With_NACK>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
     c64:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_Get_Status>
     c68:	88 35       	cpi	r24, 0x58	; 88
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0xa6>
		return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <EEPROM_readByte+0xae>

	TWI_Stop();
     c70:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_Stop>
	return SUCCESS;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <EEPROM_writeString>:


void EEPROM_writeString(uint16 u16addr, uint8 *str){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	a1 97       	sbiw	r28, 0x21	; 33
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	9f 8f       	std	Y+31, r25	; 0x1f
     ca0:	8e 8f       	std	Y+30, r24	; 0x1e
     ca2:	79 a3       	std	Y+33, r23	; 0x21
     ca4:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i = 0;
     ca6:	1d 8e       	std	Y+29, r1	; 0x1d
     ca8:	87 c0       	rjmp	.+270    	; 0xdb8 <EEPROM_writeString+0x12e>
	while(*str != '\0'){
		EEPROM_writeByte(u16addr + i, *str);
     caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	e8 a1       	ldd	r30, Y+32	; 0x20
     cba:	f9 a1       	ldd	r31, Y+33	; 0x21
     cbc:	20 81       	ld	r18, Z
     cbe:	62 2f       	mov	r22, r18
     cc0:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e2       	ldi	r26, 0x20	; 32
     cca:	b1 e4       	ldi	r27, 0x41	; 65
     ccc:	89 8f       	std	Y+25, r24	; 0x19
     cce:	9a 8f       	std	Y+26, r25	; 0x1a
     cd0:	ab 8f       	std	Y+27, r26	; 0x1b
     cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd4:	69 8d       	ldd	r22, Y+25	; 0x19
     cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a e7       	ldi	r20, 0x7A	; 122
     ce2:	53 e4       	ldi	r21, 0x43	; 67
     ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8d 8b       	std	Y+21, r24	; 0x15
     cee:	9e 8b       	std	Y+22, r25	; 0x16
     cf0:	af 8b       	std	Y+23, r26	; 0x17
     cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf4:	6d 89       	ldd	r22, Y+21	; 0x15
     cf6:	7e 89       	ldd	r23, Y+22	; 0x16
     cf8:	8f 89       	ldd	r24, Y+23	; 0x17
     cfa:	98 8d       	ldd	r25, Y+24	; 0x18
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	2c f4       	brge	.+10     	; 0xd16 <EEPROM_writeString+0x8c>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <EEPROM_writeString+0x10a>
	else if (__tmp > 65535)
     d16:	6d 89       	ldd	r22, Y+21	; 0x15
     d18:	7e 89       	ldd	r23, Y+22	; 0x16
     d1a:	8f 89       	ldd	r24, Y+23	; 0x17
     d1c:	98 8d       	ldd	r25, Y+24	; 0x18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	4c f5       	brge	.+82     	; 0xd80 <EEPROM_writeString+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2e:	69 8d       	ldd	r22, Y+25	; 0x19
     d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9c 8b       	std	Y+20, r25	; 0x14
     d54:	8b 8b       	std	Y+19, r24	; 0x13
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <EEPROM_writeString+0xec>
     d58:	89 e1       	ldi	r24, 0x19	; 25
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d60:	89 89       	ldd	r24, Y+17	; 0x11
     d62:	9a 89       	ldd	r25, Y+18	; 0x12
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <EEPROM_writeString+0xda>
     d68:	9a 8b       	std	Y+18, r25	; 0x12
     d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6c:	8b 89       	ldd	r24, Y+19	; 0x13
     d6e:	9c 89       	ldd	r25, Y+20	; 0x14
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	8b 89       	ldd	r24, Y+19	; 0x13
     d78:	9c 89       	ldd	r25, Y+20	; 0x14
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f7       	brne	.-38     	; 0xd58 <EEPROM_writeString+0xce>
     d7e:	14 c0       	rjmp	.+40     	; 0xda8 <EEPROM_writeString+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	6d 89       	ldd	r22, Y+21	; 0x15
     d82:	7e 89       	ldd	r23, Y+22	; 0x16
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	98 89       	ldd	r25, Y+16	; 0x10
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <EEPROM_writeString+0x116>
     da4:	98 8b       	std	Y+16, r25	; 0x10
     da6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		str++;
     da8:	88 a1       	ldd	r24, Y+32	; 0x20
     daa:	99 a1       	ldd	r25, Y+33	; 0x21
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	99 a3       	std	Y+33, r25	; 0x21
     db0:	88 a3       	std	Y+32, r24	; 0x20
		i++;
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8d 8f       	std	Y+29, r24	; 0x1d
}


void EEPROM_writeString(uint16 u16addr, uint8 *str){
	uint8 i = 0;
	while(*str != '\0'){
     db8:	e8 a1       	ldd	r30, Y+32	; 0x20
     dba:	f9 a1       	ldd	r31, Y+33	; 0x21
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <EEPROM_writeString+0x13a>
     dc2:	73 cf       	rjmp	.-282    	; 0xcaa <EEPROM_writeString+0x20>
		EEPROM_writeByte(u16addr + i, *str);
		_delay_ms(10);
		str++;
		i++;
	}
	EEPROM_writeByte(u16addr + i, *str);
     dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	e8 a1       	ldd	r30, Y+32	; 0x20
     dd4:	f9 a1       	ldd	r31, Y+33	; 0x21
     dd6:	20 81       	ld	r18, Z
     dd8:	62 2f       	mov	r22, r18
     dda:	0e 94 a4 05 	call	0xb48	; 0xb48 <EEPROM_writeByte>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 e2       	ldi	r26, 0x20	; 32
     de4:	b1 e4       	ldi	r27, 0x41	; 65
     de6:	8b 87       	std	Y+11, r24	; 0x0b
     de8:	9c 87       	std	Y+12, r25	; 0x0c
     dea:	ad 87       	std	Y+13, r26	; 0x0d
     dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dee:	6b 85       	ldd	r22, Y+11	; 0x0b
     df0:	7c 85       	ldd	r23, Y+12	; 0x0c
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	9e 85       	ldd	r25, Y+14	; 0x0e
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	4a e7       	ldi	r20, 0x7A	; 122
     dfc:	53 e4       	ldi	r21, 0x43	; 67
     dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	8f 83       	std	Y+7, r24	; 0x07
     e08:	98 87       	std	Y+8, r25	; 0x08
     e0a:	a9 87       	std	Y+9, r26	; 0x09
     e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0e:	6f 81       	ldd	r22, Y+7	; 0x07
     e10:	78 85       	ldd	r23, Y+8	; 0x08
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	9a 85       	ldd	r25, Y+10	; 0x0a
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e8       	ldi	r20, 0x80	; 128
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e22:	88 23       	and	r24, r24
     e24:	2c f4       	brge	.+10     	; 0xe30 <EEPROM_writeString+0x1a6>
		__ticks = 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	8d 83       	std	Y+5, r24	; 0x05
     e2e:	3f c0       	rjmp	.+126    	; 0xeae <EEPROM_writeString+0x224>
	else if (__tmp > 65535)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	3f ef       	ldi	r19, 0xFF	; 255
     e3c:	4f e7       	ldi	r20, 0x7F	; 127
     e3e:	57 e4       	ldi	r21, 0x47	; 71
     e40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e44:	18 16       	cp	r1, r24
     e46:	4c f5       	brge	.+82     	; 0xe9a <EEPROM_writeString+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e48:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e2       	ldi	r20, 0x20	; 32
     e56:	51 e4       	ldi	r21, 0x41	; 65
     e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	bc 01       	movw	r22, r24
     e62:	cd 01       	movw	r24, r26
     e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <EEPROM_writeString+0x206>
     e72:	89 e1       	ldi	r24, 0x19	; 25
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <EEPROM_writeString+0x1f4>
     e82:	9c 83       	std	Y+4, r25	; 0x04
     e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9e 83       	std	Y+6, r25	; 0x06
     e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	69 f7       	brne	.-38     	; 0xe72 <EEPROM_writeString+0x1e8>
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <EEPROM_writeString+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	8d 83       	std	Y+5, r24	; 0x05
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <EEPROM_writeString+0x230>
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
     ec2:	a1 96       	adiw	r28, 0x21	; 33
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <EEPROM_readString>:


void EEPROM_readString(uint16 u16addr, uint8 *str){
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	a1 97       	sbiw	r28, 0x21	; 33
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	9f 8f       	std	Y+31, r25	; 0x1f
     eea:	8e 8f       	std	Y+30, r24	; 0x1e
     eec:	79 a3       	std	Y+33, r23	; 0x21
     eee:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i = 0;
     ef0:	1d 8e       	std	Y+29, r1	; 0x1d
	EEPROM_readByte(u16addr + i, &str[i]);
     ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     efa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     efc:	a9 01       	movw	r20, r18
     efe:	48 0f       	add	r20, r24
     f00:	59 1f       	adc	r21, r25
     f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	88 a1       	ldd	r24, Y+32	; 0x20
     f0a:	99 a1       	ldd	r25, Y+33	; 0x21
     f0c:	28 0f       	add	r18, r24
     f0e:	39 1f       	adc	r19, r25
     f10:	ca 01       	movw	r24, r20
     f12:	b9 01       	movw	r22, r18
     f14:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e2       	ldi	r26, 0x20	; 32
     f1e:	b1 e4       	ldi	r27, 0x41	; 65
     f20:	89 8f       	std	Y+25, r24	; 0x19
     f22:	9a 8f       	std	Y+26, r25	; 0x1a
     f24:	ab 8f       	std	Y+27, r26	; 0x1b
     f26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	69 8d       	ldd	r22, Y+25	; 0x19
     f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a e7       	ldi	r20, 0x7A	; 122
     f36:	53 e4       	ldi	r21, 0x43	; 67
     f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8d 8b       	std	Y+21, r24	; 0x15
     f42:	9e 8b       	std	Y+22, r25	; 0x16
     f44:	af 8b       	std	Y+23, r26	; 0x17
     f46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f48:	6d 89       	ldd	r22, Y+21	; 0x15
     f4a:	7e 89       	ldd	r23, Y+22	; 0x16
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <EEPROM_readString+0x96>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9c 8b       	std	Y+20, r25	; 0x14
     f66:	8b 8b       	std	Y+19, r24	; 0x13
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <EEPROM_readString+0x114>
	else if (__tmp > 65535)
     f6a:	6d 89       	ldd	r22, Y+21	; 0x15
     f6c:	7e 89       	ldd	r23, Y+22	; 0x16
     f6e:	8f 89       	ldd	r24, Y+23	; 0x17
     f70:	98 8d       	ldd	r25, Y+24	; 0x18
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <EEPROM_readString+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	69 8d       	ldd	r22, Y+25	; 0x19
     f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
     faa:	0f c0       	rjmp	.+30     	; 0xfca <EEPROM_readString+0xf6>
     fac:	89 e1       	ldi	r24, 0x19	; 25
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9a 8b       	std	Y+18, r25	; 0x12
     fb2:	89 8b       	std	Y+17, r24	; 0x11
     fb4:	89 89       	ldd	r24, Y+17	; 0x11
     fb6:	9a 89       	ldd	r25, Y+18	; 0x12
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <EEPROM_readString+0xe4>
     fbc:	9a 8b       	std	Y+18, r25	; 0x12
     fbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8b 89       	ldd	r24, Y+19	; 0x13
     fc2:	9c 89       	ldd	r25, Y+20	; 0x14
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9c 8b       	std	Y+20, r25	; 0x14
     fc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8b 89       	ldd	r24, Y+19	; 0x13
     fcc:	9c 89       	ldd	r25, Y+20	; 0x14
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <EEPROM_readString+0xd8>
     fd2:	9d c0       	rjmp	.+314    	; 0x110e <EEPROM_readString+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6d 89       	ldd	r22, Y+21	; 0x15
     fd6:	7e 89       	ldd	r23, Y+22	; 0x16
     fd8:	8f 89       	ldd	r24, Y+23	; 0x17
     fda:	98 8d       	ldd	r25, Y+24	; 0x18
     fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	98 8b       	std	Y+16, r25	; 0x10
     fee:	8f 87       	std	Y+15, r24	; 0x0f
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	98 89       	ldd	r25, Y+16	; 0x10
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <EEPROM_readString+0x120>
     ff8:	98 8b       	std	Y+16, r25	; 0x10
     ffa:	8f 87       	std	Y+15, r24	; 0x0f
     ffc:	88 c0       	rjmp	.+272    	; 0x110e <EEPROM_readString+0x23a>
	_delay_ms(10);
	while(str[i] != '\0'){
		i++;
     ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8d 8f       	std	Y+29, r24	; 0x1d
		EEPROM_readByte(u16addr + i, &str[i]);
    1004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    100c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    100e:	a9 01       	movw	r20, r18
    1010:	48 0f       	add	r20, r24
    1012:	59 1f       	adc	r21, r25
    1014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	88 a1       	ldd	r24, Y+32	; 0x20
    101c:	99 a1       	ldd	r25, Y+33	; 0x21
    101e:	28 0f       	add	r18, r24
    1020:	39 1f       	adc	r19, r25
    1022:	ca 01       	movw	r24, r20
    1024:	b9 01       	movw	r22, r18
    1026:	0e 94 e5 05 	call	0xbca	; 0xbca <EEPROM_readByte>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e2       	ldi	r26, 0x20	; 32
    1030:	b1 e4       	ldi	r27, 0x41	; 65
    1032:	8b 87       	std	Y+11, r24	; 0x0b
    1034:	9c 87       	std	Y+12, r25	; 0x0c
    1036:	ad 87       	std	Y+13, r26	; 0x0d
    1038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a e7       	ldi	r20, 0x7A	; 122
    1048:	53 e4       	ldi	r21, 0x43	; 67
    104a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8f 83       	std	Y+7, r24	; 0x07
    1054:	98 87       	std	Y+8, r25	; 0x08
    1056:	a9 87       	std	Y+9, r26	; 0x09
    1058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <EEPROM_readString+0x1a8>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <EEPROM_readString+0x226>
	else if (__tmp > 65535)
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <EEPROM_readString+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <EEPROM_readString+0x208>
    10be:	89 e1       	ldi	r24, 0x19	; 25
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <EEPROM_readString+0x1f6>
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <EEPROM_readString+0x1ea>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <EEPROM_readString+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <EEPROM_readString+0x232>
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_readString(uint16 u16addr, uint8 *str){
	uint8 i = 0;
	EEPROM_readByte(u16addr + i, &str[i]);
	_delay_ms(10);
	while(str[i] != '\0'){
    110e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	88 a1       	ldd	r24, Y+32	; 0x20
    1116:	99 a1       	ldd	r25, Y+33	; 0x21
    1118:	fc 01       	movw	r30, r24
    111a:	e2 0f       	add	r30, r18
    111c:	f3 1f       	adc	r31, r19
    111e:	80 81       	ld	r24, Z
    1120:	88 23       	and	r24, r24
    1122:	09 f0       	breq	.+2      	; 0x1126 <EEPROM_readString+0x252>
    1124:	6c cf       	rjmp	.-296    	; 0xffe <EEPROM_readString+0x12a>
		i++;
		EEPROM_readByte(u16addr + i, &str[i]);
		_delay_ms(10);
	}
}
    1126:	a1 96       	adiw	r28, 0x21	; 33
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <TWI_init>:
#include "i2c.h"

#define SCL 400000


void TWI_init(){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Prescaler = 1
	 * CLK Frequency must be 8 MHz to get TWBR +ve value
	 * SCL Frequency = 100 kbit/sec
	 */
	TWBR = 0x02; /* ((F_CPU / SCL - 16) / 2) */
    1140:	e0 e2       	ldi	r30, 0x20	; 32
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	80 83       	st	Z, r24
	TWSR = 0x00; /* Prescaler = 1 */
    1148:	e1 e2       	ldi	r30, 0x21	; 33
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	10 82       	st	Z, r1

	TWAR = 0b00000010;
    114e:	e2 e2       	ldi	r30, 0x22	; 34
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	80 83       	st	Z, r24
	/*
	 * TWEN = 1 to enable the I2C
	 */
	TWCR = (1 << TWEN);
    1156:	e6 e5       	ldi	r30, 0x56	; 86
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	80 83       	st	Z, r24


}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TWI_Start>:



void TWI_Start(){
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWSTA);
    116c:	e6 e5       	ldi	r30, 0x56	; 86
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	84 e2       	ldi	r24, 0x24	; 36
    1172:	80 83       	st	Z, r24

	/*while(TWSR >> 3 != TW_START);*/
	 while(BIT_IS_CLEAR(TWCR,TWINT));
    1174:	e6 e5       	ldi	r30, 0x56	; 86
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	dc f7       	brge	.-10     	; 0x1174 <TWI_Start+0x10>
}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <TWI_Stop>:

void TWI_Stop(){
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWSTO);
    118c:	e6 e5       	ldi	r30, 0x56	; 86
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	84 e1       	ldi	r24, 0x14	; 20
    1192:	80 83       	st	Z, r24

	/* while(BIT_IS_CLEAR(TWCR,TWINT)); */
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <TWI_write>:


void TWI_write(uint8 data){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    11a6:	e3 e2       	ldi	r30, 0x23	; 35
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 83       	st	Z, r24

	TWCR = (1 << TWEN) | (1 << TWINT);
    11ae:	e6 e5       	ldi	r30, 0x56	; 86
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	84 e8       	ldi	r24, 0x84	; 132
    11b4:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <TWI_write+0x1c>
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(){
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    11d0:	e6 e5       	ldi	r30, 0x56	; 86
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	84 ec       	ldi	r24, 0xC4	; 196
    11d6:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    11d8:	e6 e5       	ldi	r30, 0x56	; 86
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	dc f7       	brge	.-10     	; 0x11d8 <TWI_Read_With_ACK+0x10>

	return TWDR;
    11e2:	e3 e2       	ldi	r30, 0x23	; 35
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(){
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	84 e8       	ldi	r24, 0x84	; 132
    11fc:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    11fe:	e6 e5       	ldi	r30, 0x56	; 86
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 23       	and	r24, r24
    1206:	dc f7       	brge	.-10     	; 0x11fe <TWI_Read_With_NACK+0x10>

	return TWDR;
    1208:	e3 e2       	ldi	r30, 0x23	; 35
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <TWI_Get_Status>:

uint8 TWI_Get_Status(){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	return TWSR & 0xf8;
    121c:	e1 e2       	ldi	r30, 0x21	; 33
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 7f       	andi	r24, 0xF8	; 248
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <LCD_init>:
 *      Author: Ansary
 */
#include "lcd.h"
#include "stdlib.h"

void LCD_init(){
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_DDR |= 1 << RW | 1 << EN | 1 << RS;
    1232:	a1 e3       	ldi	r26, 0x31	; 49
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e1 e3       	ldi	r30, 0x31	; 49
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 67       	ori	r24, 0x70	; 112
    123e:	8c 93       	st	X, r24
	#if DATA_BITS_MODE == 8
		LCD_DATA_DDR = 0xff;
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#elif DATA_BITS_MODE == 4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_DDR |= 0xf0;
    1240:	aa e3       	ldi	r26, 0x3A	; 58
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ea e3       	ldi	r30, 0x3A	; 58
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 6f       	ori	r24, 0xF0	; 240
    124c:	8c 93       	st	X, r24
		#else
			LCD_DATA_DDR |= 0x0f;
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1254:	88 e2       	ldi	r24, 0x28	; 40
    1256:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF);
    125a:	8c e0       	ldi	r24, 0x0C	; 12
    125c:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>

}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	c3 56       	subi	r28, 0x63	; 99
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	fe 01       	movw	r30, r28
    1288:	ed 59       	subi	r30, 0x9D	; 157
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, RS);
    128e:	a2 e3       	ldi	r26, 0x32	; 50
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e2 e3       	ldi	r30, 0x32	; 50
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 7e       	andi	r24, 0xEF	; 239
    129a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7d       	andi	r24, 0xDF	; 223
    12a8:	8c 93       	st	X, r24
    12aa:	fe 01       	movw	r30, r28
    12ac:	e1 5a       	subi	r30, 0xA1	; 161
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e8       	ldi	r26, 0x80	; 128
    12b6:	bf e3       	ldi	r27, 0x3F	; 63
    12b8:	80 83       	st	Z, r24
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	a2 83       	std	Z+2, r26	; 0x02
    12be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	8e 01       	movw	r16, r28
    12c2:	05 5a       	subi	r16, 0xA5	; 165
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	fe 01       	movw	r30, r28
    12c8:	e1 5a       	subi	r30, 0xA1	; 161
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	4a e7       	ldi	r20, 0x7A	; 122
    12da:	53 e4       	ldi	r21, 0x43	; 67
    12dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ee:	fe 01       	movw	r30, r28
    12f0:	e5 5a       	subi	r30, 0xA5	; 165
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	44 f4       	brge	.+16     	; 0x131c <LCD_sendCommand+0xb0>
		__ticks = 1;
    130c:	fe 01       	movw	r30, r28
    130e:	e7 5a       	subi	r30, 0xA7	; 167
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	64 c0       	rjmp	.+200    	; 0x13e4 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    131c:	fe 01       	movw	r30, r28
    131e:	e5 5a       	subi	r30, 0xA5	; 165
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	0c f0       	brlt	.+2      	; 0x133c <LCD_sendCommand+0xd0>
    133a:	43 c0       	rjmp	.+134    	; 0x13c2 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	fe 01       	movw	r30, r28
    133e:	e1 5a       	subi	r30, 0xA1	; 161
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8e 01       	movw	r16, r28
    135c:	07 5a       	subi	r16, 0xA7	; 167
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	1f c0       	rjmp	.+62     	; 0x13b2 <LCD_sendCommand+0x146>
    1374:	fe 01       	movw	r30, r28
    1376:	e9 5a       	subi	r30, 0xA9	; 169
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	89 e1       	ldi	r24, 0x19	; 25
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	fe 01       	movw	r30, r28
    1384:	e9 5a       	subi	r30, 0xA9	; 169
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_sendCommand+0x120>
    1390:	fe 01       	movw	r30, r28
    1392:	e9 5a       	subi	r30, 0xA9	; 169
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	de 01       	movw	r26, r28
    139c:	a7 5a       	subi	r26, 0xA7	; 167
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	e7 5a       	subi	r30, 0xA7	; 167
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	9c 93       	st	X, r25
    13b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 5a       	subi	r30, 0xA7	; 167
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	d1 f6       	brne	.-76     	; 0x1374 <LCD_sendCommand+0x108>
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	8e 01       	movw	r16, r28
    13c4:	07 5a       	subi	r16, 0xA7	; 167
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	fe 01       	movw	r30, r28
    13ca:	e5 5a       	subi	r30, 0xA5	; 165
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	de 01       	movw	r26, r28
    13e6:	ab 5a       	subi	r26, 0xAB	; 171
    13e8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ea:	fe 01       	movw	r30, r28
    13ec:	e7 5a       	subi	r30, 0xA7	; 167
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	8d 93       	st	X+, r24
    13f6:	9c 93       	st	X, r25
    13f8:	fe 01       	movw	r30, r28
    13fa:	eb 5a       	subi	r30, 0xAB	; 171
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_sendCommand+0x196>
    1406:	fe 01       	movw	r30, r28
    1408:	eb 5a       	subi	r30, 0xAB	; 171
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, EN);
    1410:	a2 e3       	ldi	r26, 0x32	; 50
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8c 93       	st	X, r24
    141e:	fe 01       	movw	r30, r28
    1420:	ef 5a       	subi	r30, 0xAF	; 175
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e8       	ldi	r26, 0x80	; 128
    142a:	bf e3       	ldi	r27, 0x3F	; 63
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	8e 01       	movw	r16, r28
    1436:	03 5b       	subi	r16, 0xB3	; 179
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	fe 01       	movw	r30, r28
    143c:	ef 5a       	subi	r30, 0xAF	; 175
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	60 81       	ld	r22, Z
    1442:	71 81       	ldd	r23, Z+1	; 0x01
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	f8 01       	movw	r30, r16
    145a:	80 83       	st	Z, r24
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	a2 83       	std	Z+2, r26	; 0x02
    1460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1462:	fe 01       	movw	r30, r28
    1464:	e3 5b       	subi	r30, 0xB3	; 179
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	44 f4       	brge	.+16     	; 0x1490 <LCD_sendCommand+0x224>
		__ticks = 1;
    1480:	fe 01       	movw	r30, r28
    1482:	e5 5b       	subi	r30, 0xB5	; 181
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	64 c0       	rjmp	.+200    	; 0x1558 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1490:	fe 01       	movw	r30, r28
    1492:	e3 5b       	subi	r30, 0xB3	; 179
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <LCD_sendCommand+0x244>
    14ae:	43 c0       	rjmp	.+134    	; 0x1536 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b0:	fe 01       	movw	r30, r28
    14b2:	ef 5a       	subi	r30, 0xAF	; 175
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	8e 01       	movw	r16, r28
    14d0:	05 5b       	subi	r16, 0xB5	; 181
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	f8 01       	movw	r30, r16
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	80 83       	st	Z, r24
    14e6:	1f c0       	rjmp	.+62     	; 0x1526 <LCD_sendCommand+0x2ba>
    14e8:	fe 01       	movw	r30, r28
    14ea:	e7 5b       	subi	r30, 0xB7	; 183
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	89 e1       	ldi	r24, 0x19	; 25
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
    14f6:	fe 01       	movw	r30, r28
    14f8:	e7 5b       	subi	r30, 0xB7	; 183
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_sendCommand+0x294>
    1504:	fe 01       	movw	r30, r28
    1506:	e7 5b       	subi	r30, 0xB7	; 183
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	de 01       	movw	r26, r28
    1510:	a5 5b       	subi	r26, 0xB5	; 181
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1526:	fe 01       	movw	r30, r28
    1528:	e5 5b       	subi	r30, 0xB5	; 181
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	d1 f6       	brne	.-76     	; 0x14e8 <LCD_sendCommand+0x27c>
    1534:	27 c0       	rjmp	.+78     	; 0x1584 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1536:	8e 01       	movw	r16, r28
    1538:	05 5b       	subi	r16, 0xB5	; 181
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	fe 01       	movw	r30, r28
    153e:	e3 5b       	subi	r30, 0xB3	; 179
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	f8 01       	movw	r30, r16
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	80 83       	st	Z, r24
    1558:	de 01       	movw	r26, r28
    155a:	a9 5b       	subi	r26, 0xB9	; 185
    155c:	bf 4f       	sbci	r27, 0xFF	; 255
    155e:	fe 01       	movw	r30, r28
    1560:	e5 5b       	subi	r30, 0xB5	; 181
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	8d 93       	st	X+, r24
    156a:	9c 93       	st	X, r25
    156c:	fe 01       	movw	r30, r28
    156e:	e9 5b       	subi	r30, 0xB9	; 185
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <LCD_sendCommand+0x30a>
    157a:	fe 01       	movw	r30, r28
    157c:	e9 5b       	subi	r30, 0xB9	; 185
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
		_delay_ms(1);
	#elif DATA_BITS_MODE == 4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (command & 0xf0);
    1584:	ab e3       	ldi	r26, 0x3B	; 59
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	eb e3       	ldi	r30, 0x3B	; 59
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	98 2f       	mov	r25, r24
    1590:	9f 70       	andi	r25, 0x0F	; 15
    1592:	fe 01       	movw	r30, r28
    1594:	ed 59       	subi	r30, 0x9D	; 157
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	80 7f       	andi	r24, 0xF0	; 240
    159c:	89 2b       	or	r24, r25
    159e:	8c 93       	st	X, r24
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 5b       	subi	r30, 0xBD	; 189
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e8       	ldi	r26, 0x80	; 128
    15ac:	bf e3       	ldi	r27, 0x3F	; 63
    15ae:	80 83       	st	Z, r24
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	a2 83       	std	Z+2, r26	; 0x02
    15b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	8e 01       	movw	r16, r28
    15b8:	01 5c       	subi	r16, 0xC1	; 193
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	fe 01       	movw	r30, r28
    15be:	ed 5b       	subi	r30, 0xBD	; 189
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a e7       	ldi	r20, 0x7A	; 122
    15d0:	53 e4       	ldi	r21, 0x43	; 67
    15d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	f8 01       	movw	r30, r16
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e4:	fe 01       	movw	r30, r28
    15e6:	ff 96       	adiw	r30, 0x3f	; 63
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <LCD_sendCommand+0x39e>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9e af       	std	Y+62, r25	; 0x3e
    1606:	8d af       	std	Y+61, r24	; 0x3d
    1608:	46 c0       	rjmp	.+140    	; 0x1696 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    160a:	fe 01       	movw	r30, r28
    160c:	ff 96       	adiw	r30, 0x3f	; 63
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	64 f5       	brge	.+88     	; 0x167e <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	fe 01       	movw	r30, r28
    1628:	ed 5b       	subi	r30, 0xBD	; 189
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e af       	std	Y+62, r25	; 0x3e
    1652:	8d af       	std	Y+61, r24	; 0x3d
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <LCD_sendCommand+0x408>
    1656:	89 e1       	ldi	r24, 0x19	; 25
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c af       	std	Y+60, r25	; 0x3c
    165c:	8b af       	std	Y+59, r24	; 0x3b
    165e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1660:	9c ad       	ldd	r25, Y+60	; 0x3c
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_sendCommand+0x3f6>
    1666:	9c af       	std	Y+60, r25	; 0x3c
    1668:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d ad       	ldd	r24, Y+61	; 0x3d
    166c:	9e ad       	ldd	r25, Y+62	; 0x3e
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e af       	std	Y+62, r25	; 0x3e
    1672:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d ad       	ldd	r24, Y+61	; 0x3d
    1676:	9e ad       	ldd	r25, Y+62	; 0x3e
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <LCD_sendCommand+0x3ea>
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	fe 01       	movw	r30, r28
    1680:	ff 96       	adiw	r30, 0x3f	; 63
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9e af       	std	Y+62, r25	; 0x3e
    1694:	8d af       	std	Y+61, r24	; 0x3d
    1696:	8d ad       	ldd	r24, Y+61	; 0x3d
    1698:	9e ad       	ldd	r25, Y+62	; 0x3e
    169a:	9a af       	std	Y+58, r25	; 0x3a
    169c:	89 af       	std	Y+57, r24	; 0x39
    169e:	89 ad       	ldd	r24, Y+57	; 0x39
    16a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <LCD_sendCommand+0x436>
    16a6:	9a af       	std	Y+58, r25	; 0x3a
    16a8:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((command & 0xf0) >> 4);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
    16aa:	a2 e3       	ldi	r26, 0x32	; 50
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7b       	andi	r24, 0xBF	; 191
    16b6:	8c 93       	st	X, r24
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e8       	ldi	r26, 0x80	; 128
    16be:	bf e3       	ldi	r27, 0x3F	; 63
    16c0:	8d ab       	std	Y+53, r24	; 0x35
    16c2:	9e ab       	std	Y+54, r25	; 0x36
    16c4:	af ab       	std	Y+55, r26	; 0x37
    16c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c8:	6d a9       	ldd	r22, Y+53	; 0x35
    16ca:	7e a9       	ldd	r23, Y+54	; 0x36
    16cc:	8f a9       	ldd	r24, Y+55	; 0x37
    16ce:	98 ad       	ldd	r25, Y+56	; 0x38
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a e7       	ldi	r20, 0x7A	; 122
    16d6:	53 e4       	ldi	r21, 0x43	; 67
    16d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	89 ab       	std	Y+49, r24	; 0x31
    16e2:	9a ab       	std	Y+50, r25	; 0x32
    16e4:	ab ab       	std	Y+51, r26	; 0x33
    16e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16e8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ea:	7a a9       	ldd	r23, Y+50	; 0x32
    16ec:	8b a9       	ldd	r24, Y+51	; 0x33
    16ee:	9c a9       	ldd	r25, Y+52	; 0x34
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	2c f4       	brge	.+10     	; 0x170a <LCD_sendCommand+0x49e>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
    1708:	3f c0       	rjmp	.+126    	; 0x1788 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    170a:	69 a9       	ldd	r22, Y+49	; 0x31
    170c:	7a a9       	ldd	r23, Y+50	; 0x32
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	4c f5       	brge	.+82     	; 0x1774 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	6d a9       	ldd	r22, Y+53	; 0x35
    1724:	7e a9       	ldd	r23, Y+54	; 0x36
    1726:	8f a9       	ldd	r24, Y+55	; 0x37
    1728:	98 ad       	ldd	r25, Y+56	; 0x38
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	98 ab       	std	Y+48, r25	; 0x30
    1748:	8f a7       	std	Y+47, r24	; 0x2f
    174a:	0f c0       	rjmp	.+30     	; 0x176a <LCD_sendCommand+0x4fe>
    174c:	89 e1       	ldi	r24, 0x19	; 25
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9e a7       	std	Y+46, r25	; 0x2e
    1752:	8d a7       	std	Y+45, r24	; 0x2d
    1754:	8d a5       	ldd	r24, Y+45	; 0x2d
    1756:	9e a5       	ldd	r25, Y+46	; 0x2e
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <LCD_sendCommand+0x4ec>
    175c:	9e a7       	std	Y+46, r25	; 0x2e
    175e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1760:	8f a5       	ldd	r24, Y+47	; 0x2f
    1762:	98 a9       	ldd	r25, Y+48	; 0x30
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	98 ab       	std	Y+48, r25	; 0x30
    1768:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176a:	8f a5       	ldd	r24, Y+47	; 0x2f
    176c:	98 a9       	ldd	r25, Y+48	; 0x30
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	69 f7       	brne	.-38     	; 0x174c <LCD_sendCommand+0x4e0>
    1772:	14 c0       	rjmp	.+40     	; 0x179c <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1774:	69 a9       	ldd	r22, Y+49	; 0x31
    1776:	7a a9       	ldd	r23, Y+50	; 0x32
    1778:	8b a9       	ldd	r24, Y+51	; 0x33
    177a:	9c a9       	ldd	r25, Y+52	; 0x34
    177c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	98 ab       	std	Y+48, r25	; 0x30
    1786:	8f a7       	std	Y+47, r24	; 0x2f
    1788:	8f a5       	ldd	r24, Y+47	; 0x2f
    178a:	98 a9       	ldd	r25, Y+48	; 0x30
    178c:	9c a7       	std	Y+44, r25	; 0x2c
    178e:	8b a7       	std	Y+43, r24	; 0x2b
    1790:	8b a5       	ldd	r24, Y+43	; 0x2b
    1792:	9c a5       	ldd	r25, Y+44	; 0x2c
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <LCD_sendCommand+0x528>
    1798:	9c a7       	std	Y+44, r25	; 0x2c
    179a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT, EN);
    179c:	a2 e3       	ldi	r26, 0x32	; 50
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e2 e3       	ldi	r30, 0x32	; 50
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 64       	ori	r24, 0x40	; 64
    17a8:	8c 93       	st	X, r24
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e8       	ldi	r26, 0x80	; 128
    17b0:	bf e3       	ldi	r27, 0x3F	; 63
    17b2:	8f a3       	std	Y+39, r24	; 0x27
    17b4:	98 a7       	std	Y+40, r25	; 0x28
    17b6:	a9 a7       	std	Y+41, r26	; 0x29
    17b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6f a1       	ldd	r22, Y+39	; 0x27
    17bc:	78 a5       	ldd	r23, Y+40	; 0x28
    17be:	89 a5       	ldd	r24, Y+41	; 0x29
    17c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	4a e7       	ldi	r20, 0x7A	; 122
    17c8:	53 e4       	ldi	r21, 0x43	; 67
    17ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8b a3       	std	Y+35, r24	; 0x23
    17d4:	9c a3       	std	Y+36, r25	; 0x24
    17d6:	ad a3       	std	Y+37, r26	; 0x25
    17d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <LCD_sendCommand+0x590>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    17fc:	6b a1       	ldd	r22, Y+35	; 0x23
    17fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1800:	8d a1       	ldd	r24, Y+37	; 0x25
    1802:	9e a1       	ldd	r25, Y+38	; 0x26
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
    183c:	0f c0       	rjmp	.+30     	; 0x185c <LCD_sendCommand+0x5f0>
    183e:	89 e1       	ldi	r24, 0x19	; 25
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	98 a3       	std	Y+32, r25	; 0x20
    1844:	8f 8f       	std	Y+31, r24	; 0x1f
    1846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1848:	98 a1       	ldd	r25, Y+32	; 0x20
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <LCD_sendCommand+0x5de>
    184e:	98 a3       	std	Y+32, r25	; 0x20
    1850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	9a a1       	ldd	r25, Y+34	; 0x22
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <LCD_sendCommand+0x5d2>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6b a1       	ldd	r22, Y+35	; 0x23
    1868:	7c a1       	ldd	r23, Y+36	; 0x24
    186a:	8d a1       	ldd	r24, Y+37	; 0x25
    186c:	9e a1       	ldd	r25, Y+38	; 0x26
    186e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9a a3       	std	Y+34, r25	; 0x22
    1878:	89 a3       	std	Y+33, r24	; 0x21
    187a:	89 a1       	ldd	r24, Y+33	; 0x21
    187c:	9a a1       	ldd	r25, Y+34	; 0x22
    187e:	9e 8f       	std	Y+30, r25	; 0x1e
    1880:	8d 8f       	std	Y+29, r24	; 0x1d
    1882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <LCD_sendCommand+0x61a>
    188a:	9e 8f       	std	Y+30, r25	; 0x1e
    188c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((command & 0x0f) << 4);
    188e:	ab e3       	ldi	r26, 0x3B	; 59
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	eb e3       	ldi	r30, 0x3B	; 59
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	2f 70       	andi	r18, 0x0F	; 15
    189c:	fe 01       	movw	r30, r28
    189e:	ed 59       	subi	r30, 0x9D	; 157
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	82 95       	swap	r24
    18aa:	92 95       	swap	r25
    18ac:	90 7f       	andi	r25, 0xF0	; 240
    18ae:	98 27       	eor	r25, r24
    18b0:	80 7f       	andi	r24, 0xF0	; 240
    18b2:	98 27       	eor	r25, r24
    18b4:	82 2b       	or	r24, r18
    18b6:	8c 93       	st	X, r24
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	89 8f       	std	Y+25, r24	; 0x19
    18c2:	9a 8f       	std	Y+26, r25	; 0x1a
    18c4:	ab 8f       	std	Y+27, r26	; 0x1b
    18c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a e7       	ldi	r20, 0x7A	; 122
    18d6:	53 e4       	ldi	r21, 0x43	; 67
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8d 8b       	std	Y+21, r24	; 0x15
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	af 8b       	std	Y+23, r26	; 0x17
    18e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_sendCommand+0x69e>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    190a:	6d 89       	ldd	r22, Y+21	; 0x15
    190c:	7e 89       	ldd	r23, Y+22	; 0x16
    190e:	8f 89       	ldd	r24, Y+23	; 0x17
    1910:	98 8d       	ldd	r25, Y+24	; 0x18
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	69 8d       	ldd	r22, Y+25	; 0x19
    1924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_sendCommand+0x6fe>
    194c:	89 e1       	ldi	r24, 0x19	; 25
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9a 8b       	std	Y+18, r25	; 0x12
    1952:	89 8b       	std	Y+17, r24	; 0x11
    1954:	89 89       	ldd	r24, Y+17	; 0x11
    1956:	9a 89       	ldd	r25, Y+18	; 0x12
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_sendCommand+0x6ec>
    195c:	9a 8b       	std	Y+18, r25	; 0x12
    195e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_sendCommand+0x6e0>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	98 8b       	std	Y+16, r25	; 0x10
    198e:	8f 87       	std	Y+15, r24	; 0x0f
    1990:	8f 85       	ldd	r24, Y+15	; 0x0f
    1992:	98 89       	ldd	r25, Y+16	; 0x10
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_sendCommand+0x728>
    1998:	98 8b       	std	Y+16, r25	; 0x10
    199a:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (command & 0x0f);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8f 7b       	andi	r24, 0xBF	; 191
    19a8:	8c 93       	st	X, r24
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e8       	ldi	r26, 0x80	; 128
    19b0:	bf e3       	ldi	r27, 0x3F	; 63
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a e7       	ldi	r20, 0x7A	; 122
    19c8:	53 e4       	ldi	r21, 0x43	; 67
    19ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	a9 87       	std	Y+9, r26	; 0x09
    19d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <LCD_sendCommand+0x790>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_sendCommand+0x7f0>
    1a3e:	89 e1       	ldi	r24, 0x19	; 25
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_sendCommand+0x7de>
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_sendCommand+0x7d2>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_sendCommand+0x81a>
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
}
    1a8e:	cd 59       	subi	r28, 0x9D	; 157
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	08 95       	ret

00001aa6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	c3 56       	subi	r28, 0x63	; 99
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ed 59       	subi	r30, 0x9D	; 157
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, RS);
    1ac8:	a2 e3       	ldi	r26, 0x32	; 50
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e2 e3       	ldi	r30, 0x32	; 50
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 61       	ori	r24, 0x10	; 16
    1ad4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    1ad6:	a2 e3       	ldi	r26, 0x32	; 50
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e2 e3       	ldi	r30, 0x32	; 50
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7d       	andi	r24, 0xDF	; 223
    1ae2:	8c 93       	st	X, r24
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e1 5a       	subi	r30, 0xA1	; 161
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e8       	ldi	r26, 0x80	; 128
    1af0:	bf e3       	ldi	r27, 0x3F	; 63
    1af2:	80 83       	st	Z, r24
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	a2 83       	std	Z+2, r26	; 0x02
    1af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	8e 01       	movw	r16, r28
    1afc:	05 5a       	subi	r16, 0xA5	; 165
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e1 5a       	subi	r30, 0xA1	; 161
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 83       	st	Z, r24
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	a2 83       	std	Z+2, r26	; 0x02
    1b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e5 5a       	subi	r30, 0xA5	; 165
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	44 f4       	brge	.+16     	; 0x1b56 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5a       	subi	r30, 0xA7	; 167
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	64 c0       	rjmp	.+200    	; 0x1c1e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1b56:	fe 01       	movw	r30, r28
    1b58:	e5 5a       	subi	r30, 0xA5	; 165
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <LCD_displayCharacter+0xd0>
    1b74:	43 c0       	rjmp	.+134    	; 0x1bfc <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	fe 01       	movw	r30, r28
    1b78:	e1 5a       	subi	r30, 0xA1	; 161
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8e 01       	movw	r16, r28
    1b96:	07 5a       	subi	r16, 0xA7	; 167
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	1f c0       	rjmp	.+62     	; 0x1bec <LCD_displayCharacter+0x146>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e9 5a       	subi	r30, 0xA9	; 169
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e9 5a       	subi	r30, 0xA9	; 169
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_displayCharacter+0x120>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 5a       	subi	r30, 0xA9	; 169
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	de 01       	movw	r26, r28
    1bd6:	a7 5a       	subi	r26, 0xA7	; 167
    1bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e7 5a       	subi	r30, 0xA7	; 167
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	9c 93       	st	X, r25
    1bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 5a       	subi	r30, 0xA7	; 167
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	d1 f6       	brne	.-76     	; 0x1bae <LCD_displayCharacter+0x108>
    1bfa:	27 c0       	rjmp	.+78     	; 0x1c4a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	07 5a       	subi	r16, 0xA7	; 167
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 5a       	subi	r30, 0xA5	; 165
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	f8 01       	movw	r30, r16
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	de 01       	movw	r26, r28
    1c20:	ab 5a       	subi	r26, 0xAB	; 171
    1c22:	bf 4f       	sbci	r27, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	e7 5a       	subi	r30, 0xA7	; 167
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	8d 93       	st	X+, r24
    1c30:	9c 93       	st	X, r25
    1c32:	fe 01       	movw	r30, r28
    1c34:	eb 5a       	subi	r30, 0xAB	; 171
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_displayCharacter+0x196>
    1c40:	fe 01       	movw	r30, r28
    1c42:	eb 5a       	subi	r30, 0xAB	; 171
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, EN);
    1c4a:	a2 e3       	ldi	r26, 0x32	; 50
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e2 e3       	ldi	r30, 0x32	; 50
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 64       	ori	r24, 0x40	; 64
    1c56:	8c 93       	st	X, r24
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ef 5a       	subi	r30, 0xAF	; 175
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e8       	ldi	r26, 0x80	; 128
    1c64:	bf e3       	ldi	r27, 0x3F	; 63
    1c66:	80 83       	st	Z, r24
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	a2 83       	std	Z+2, r26	; 0x02
    1c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	8e 01       	movw	r16, r28
    1c70:	03 5b       	subi	r16, 0xB3	; 179
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	ef 5a       	subi	r30, 0xAF	; 175
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a e7       	ldi	r20, 0x7A	; 122
    1c88:	53 e4       	ldi	r21, 0x43	; 67
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	f8 01       	movw	r30, r16
    1c94:	80 83       	st	Z, r24
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	a2 83       	std	Z+2, r26	; 0x02
    1c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e3 5b       	subi	r30, 0xB3	; 179
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	44 f4       	brge	.+16     	; 0x1cca <LCD_displayCharacter+0x224>
		__ticks = 1;
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e5 5b       	subi	r30, 0xB5	; 181
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	64 c0       	rjmp	.+200    	; 0x1d92 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e3 5b       	subi	r30, 0xB3	; 179
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	0c f0       	brlt	.+2      	; 0x1cea <LCD_displayCharacter+0x244>
    1ce8:	43 c0       	rjmp	.+134    	; 0x1d70 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	fe 01       	movw	r30, r28
    1cec:	ef 5a       	subi	r30, 0xAF	; 175
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8e 01       	movw	r16, r28
    1d0a:	05 5b       	subi	r16, 0xB5	; 181
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
    1d20:	1f c0       	rjmp	.+62     	; 0x1d60 <LCD_displayCharacter+0x2ba>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e7 5b       	subi	r30, 0xB7	; 183
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
    1d30:	fe 01       	movw	r30, r28
    1d32:	e7 5b       	subi	r30, 0xB7	; 183
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 81       	ld	r24, Z
    1d38:	91 81       	ldd	r25, Z+1	; 0x01
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_displayCharacter+0x294>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e7 5b       	subi	r30, 0xB7	; 183
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	de 01       	movw	r26, r28
    1d4a:	a5 5b       	subi	r26, 0xB5	; 181
    1d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e5 5b       	subi	r30, 0xB5	; 181
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	11 96       	adiw	r26, 0x01	; 1
    1d5c:	9c 93       	st	X, r25
    1d5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 5b       	subi	r30, 0xB5	; 181
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	d1 f6       	brne	.-76     	; 0x1d22 <LCD_displayCharacter+0x27c>
    1d6e:	27 c0       	rjmp	.+78     	; 0x1dbe <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	8e 01       	movw	r16, r28
    1d72:	05 5b       	subi	r16, 0xB5	; 181
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	fe 01       	movw	r30, r28
    1d78:	e3 5b       	subi	r30, 0xB3	; 179
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	de 01       	movw	r26, r28
    1d94:	a9 5b       	subi	r26, 0xB9	; 185
    1d96:	bf 4f       	sbci	r27, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e5 5b       	subi	r30, 0xB5	; 181
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	8d 93       	st	X+, r24
    1da4:	9c 93       	st	X, r25
    1da6:	fe 01       	movw	r30, r28
    1da8:	e9 5b       	subi	r30, 0xB9	; 185
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_displayCharacter+0x30a>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e9 5b       	subi	r30, 0xB9	; 185
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
		_delay_ms(1);
	#elif DATA_BITS_MODE == 4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | (character & 0xf0);
    1dbe:	ab e3       	ldi	r26, 0x3B	; 59
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	eb e3       	ldi	r30, 0x3B	; 59
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	98 2f       	mov	r25, r24
    1dca:	9f 70       	andi	r25, 0x0F	; 15
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ed 59       	subi	r30, 0x9D	; 157
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 7f       	andi	r24, 0xF0	; 240
    1dd6:	89 2b       	or	r24, r25
    1dd8:	8c 93       	st	X, r24
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ed 5b       	subi	r30, 0xBD	; 189
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e8       	ldi	r26, 0x80	; 128
    1de6:	bf e3       	ldi	r27, 0x3F	; 63
    1de8:	80 83       	st	Z, r24
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	a2 83       	std	Z+2, r26	; 0x02
    1dee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	8e 01       	movw	r16, r28
    1df2:	01 5c       	subi	r16, 0xC1	; 193
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	ed 5b       	subi	r30, 0xBD	; 189
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a e7       	ldi	r20, 0x7A	; 122
    1e0a:	53 e4       	ldi	r21, 0x43	; 67
    1e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	f8 01       	movw	r30, r16
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ff 96       	adiw	r30, 0x3f	; 63
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9e af       	std	Y+62, r25	; 0x3e
    1e40:	8d af       	std	Y+61, r24	; 0x3d
    1e42:	46 c0       	rjmp	.+140    	; 0x1ed0 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1e44:	fe 01       	movw	r30, r28
    1e46:	ff 96       	adiw	r30, 0x3f	; 63
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	64 f5       	brge	.+88     	; 0x1eb8 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 5b       	subi	r30, 0xBD	; 189
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e af       	std	Y+62, r25	; 0x3e
    1e8c:	8d af       	std	Y+61, r24	; 0x3d
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_displayCharacter+0x408>
    1e90:	89 e1       	ldi	r24, 0x19	; 25
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c af       	std	Y+60, r25	; 0x3c
    1e96:	8b af       	std	Y+59, r24	; 0x3b
    1e98:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_displayCharacter+0x3f6>
    1ea0:	9c af       	std	Y+60, r25	; 0x3c
    1ea2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	9e af       	std	Y+62, r25	; 0x3e
    1eac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_displayCharacter+0x3ea>
    1eb6:	16 c0       	rjmp	.+44     	; 0x1ee4 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ff 96       	adiw	r30, 0x3f	; 63
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e af       	std	Y+62, r25	; 0x3e
    1ece:	8d af       	std	Y+61, r24	; 0x3d
    1ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed4:	9a af       	std	Y+58, r25	; 0x3a
    1ed6:	89 af       	std	Y+57, r24	; 0x39
    1ed8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eda:	9a ad       	ldd	r25, Y+58	; 0x3a
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_displayCharacter+0x436>
    1ee0:	9a af       	std	Y+58, r25	; 0x3a
    1ee2:	89 af       	std	Y+57, r24	; 0x39
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | ((character & 0xf0) >> 4);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
    1ee4:	a2 e3       	ldi	r26, 0x32	; 50
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e2 e3       	ldi	r30, 0x32	; 50
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8f 7b       	andi	r24, 0xBF	; 191
    1ef0:	8c 93       	st	X, r24
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	bf e3       	ldi	r27, 0x3F	; 63
    1efa:	8d ab       	std	Y+53, r24	; 0x35
    1efc:	9e ab       	std	Y+54, r25	; 0x36
    1efe:	af ab       	std	Y+55, r26	; 0x37
    1f00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6d a9       	ldd	r22, Y+53	; 0x35
    1f04:	7e a9       	ldd	r23, Y+54	; 0x36
    1f06:	8f a9       	ldd	r24, Y+55	; 0x37
    1f08:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a e7       	ldi	r20, 0x7A	; 122
    1f10:	53 e4       	ldi	r21, 0x43	; 67
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	89 ab       	std	Y+49, r24	; 0x31
    1f1c:	9a ab       	std	Y+50, r25	; 0x32
    1f1e:	ab ab       	std	Y+51, r26	; 0x33
    1f20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f22:	69 a9       	ldd	r22, Y+49	; 0x31
    1f24:	7a a9       	ldd	r23, Y+50	; 0x32
    1f26:	8b a9       	ldd	r24, Y+51	; 0x33
    1f28:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1f44:	69 a9       	ldd	r22, Y+49	; 0x31
    1f46:	7a a9       	ldd	r23, Y+50	; 0x32
    1f48:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f60:	8f a9       	ldd	r24, Y+55	; 0x37
    1f62:	98 ad       	ldd	r25, Y+56	; 0x38
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	8f a7       	std	Y+47, r24	; 0x2f
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <LCD_displayCharacter+0x4fe>
    1f86:	89 e1       	ldi	r24, 0x19	; 25
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e a7       	std	Y+46, r25	; 0x2e
    1f8c:	8d a7       	std	Y+45, r24	; 0x2d
    1f8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_displayCharacter+0x4ec>
    1f96:	9e a7       	std	Y+46, r25	; 0x2e
    1f98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	98 ab       	std	Y+48, r25	; 0x30
    1fa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <LCD_displayCharacter+0x4e0>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc6:	9c a7       	std	Y+44, r25	; 0x2c
    1fc8:	8b a7       	std	Y+43, r24	; 0x2b
    1fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_displayCharacter+0x528>
    1fd2:	9c a7       	std	Y+44, r25	; 0x2c
    1fd4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT, EN);
    1fd6:	a2 e3       	ldi	r26, 0x32	; 50
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 64       	ori	r24, 0x40	; 64
    1fe2:	8c 93       	st	X, r24
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e8       	ldi	r26, 0x80	; 128
    1fea:	bf e3       	ldi	r27, 0x3F	; 63
    1fec:	8f a3       	std	Y+39, r24	; 0x27
    1fee:	98 a7       	std	Y+40, r25	; 0x28
    1ff0:	a9 a7       	std	Y+41, r26	; 0x29
    1ff2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	53 e4       	ldi	r21, 0x43	; 67
    2004:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8b a3       	std	Y+35, r24	; 0x23
    200e:	9c a3       	std	Y+36, r25	; 0x24
    2010:	ad a3       	std	Y+37, r26	; 0x25
    2012:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <LCD_displayCharacter+0x590>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6f a1       	ldd	r22, Y+39	; 0x27
    2050:	78 a5       	ldd	r23, Y+40	; 0x28
    2052:	89 a5       	ldd	r24, Y+41	; 0x29
    2054:	9a a5       	ldd	r25, Y+42	; 0x2a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <LCD_displayCharacter+0x5f0>
    2078:	89 e1       	ldi	r24, 0x19	; 25
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	98 a3       	std	Y+32, r25	; 0x20
    207e:	8f 8f       	std	Y+31, r24	; 0x1f
    2080:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2082:	98 a1       	ldd	r25, Y+32	; 0x20
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_displayCharacter+0x5de>
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	89 a1       	ldd	r24, Y+33	; 0x21
    2098:	9a a1       	ldd	r25, Y+34	; 0x22
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <LCD_displayCharacter+0x5d2>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ba:	8d 8f       	std	Y+29, r24	; 0x1d
    20bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_displayCharacter+0x61a>
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f) | ((character & 0x0f) << 4);
    20c8:	ab e3       	ldi	r26, 0x3B	; 59
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	eb e3       	ldi	r30, 0x3B	; 59
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	28 2f       	mov	r18, r24
    20d4:	2f 70       	andi	r18, 0x0F	; 15
    20d6:	fe 01       	movw	r30, r28
    20d8:	ed 59       	subi	r30, 0x9D	; 157
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	82 95       	swap	r24
    20e4:	92 95       	swap	r25
    20e6:	90 7f       	andi	r25, 0xF0	; 240
    20e8:	98 27       	eor	r25, r24
    20ea:	80 7f       	andi	r24, 0xF0	; 240
    20ec:	98 27       	eor	r25, r24
    20ee:	82 2b       	or	r24, r18
    20f0:	8c 93       	st	X, r24
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e8       	ldi	r26, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	89 8f       	std	Y+25, r24	; 0x19
    20fc:	9a 8f       	std	Y+26, r25	; 0x1a
    20fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	69 8d       	ldd	r22, Y+25	; 0x19
    2104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a e7       	ldi	r20, 0x7A	; 122
    2110:	53 e4       	ldi	r21, 0x43	; 67
    2112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 8b       	std	Y+21, r24	; 0x15
    211c:	9e 8b       	std	Y+22, r25	; 0x16
    211e:	af 8b       	std	Y+23, r26	; 0x17
    2120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2122:	6d 89       	ldd	r22, Y+21	; 0x15
    2124:	7e 89       	ldd	r23, Y+22	; 0x16
    2126:	8f 89       	ldd	r24, Y+23	; 0x17
    2128:	98 8d       	ldd	r25, Y+24	; 0x18
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <LCD_displayCharacter+0x6fe>
    2186:	89 e1       	ldi	r24, 0x19	; 25
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
    218e:	89 89       	ldd	r24, Y+17	; 0x11
    2190:	9a 89       	ldd	r25, Y+18	; 0x12
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_displayCharacter+0x6ec>
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	8b 89       	ldd	r24, Y+19	; 0x13
    219c:	9c 89       	ldd	r25, Y+20	; 0x14
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <LCD_displayCharacter+0x6e0>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
    21ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    21cc:	98 89       	ldd	r25, Y+16	; 0x10
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_displayCharacter+0x728>
    21d2:	98 8b       	std	Y+16, r25	; 0x10
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xf0) | (character & 0x0f);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT, EN);
    21d6:	a2 e3       	ldi	r26, 0x32	; 50
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e2 e3       	ldi	r30, 0x32	; 50
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7b       	andi	r24, 0xBF	; 191
    21e2:	8c 93       	st	X, r24
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e8       	ldi	r26, 0x80	; 128
    21ea:	bf e3       	ldi	r27, 0x3F	; 63
    21ec:	8b 87       	std	Y+11, r24	; 0x0b
    21ee:	9c 87       	std	Y+12, r25	; 0x0c
    21f0:	ad 87       	std	Y+13, r26	; 0x0d
    21f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a e7       	ldi	r20, 0x7A	; 122
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	8f 83       	std	Y+7, r24	; 0x07
    220e:	98 87       	std	Y+8, r25	; 0x08
    2210:	a9 87       	std	Y+9, r26	; 0x09
    2212:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <LCD_displayCharacter+0x790>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	57 e4       	ldi	r21, 0x47	; 71
    2246:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2250:	7c 85       	ldd	r23, Y+12	; 0x0c
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <LCD_displayCharacter+0x7f0>
    2278:	89 e1       	ldi	r24, 0x19	; 25
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <LCD_displayCharacter+0x7de>
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	69 f7       	brne	.-38     	; 0x2278 <LCD_displayCharacter+0x7d2>
    229e:	14 c0       	rjmp	.+40     	; 0x22c8 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_displayCharacter+0x81a>
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
}
    22c8:	cd 59       	subi	r28, 0x9D	; 157
    22ca:	df 4f       	sbci	r29, 0xFF	; 255
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <LCD_displayString>:

void LCD_displayString(uint8 *str){
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <LCD_displayString+0x6>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	0a c0       	rjmp	.+20     	; 0x2304 <LCD_displayString+0x24>
	while(*str != '\0'){
		LCD_displayCharacter(*str);
    22f0:	e9 81       	ldd	r30, Y+1	; 0x01
    22f2:	fa 81       	ldd	r31, Y+2	; 0x02
    22f4:	80 81       	ld	r24, Z
    22f6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_displayCharacter>
		str++;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
}

void LCD_displayString(uint8 *str){
	while(*str != '\0'){
    2304:	e9 81       	ldd	r30, Y+1	; 0x01
    2306:	fa 81       	ldd	r31, Y+2	; 0x02
    2308:	80 81       	ld	r24, Z
    230a:	88 23       	and	r24, r24
    230c:	89 f7       	brne	.-30     	; 0x22f0 <LCD_displayString+0x10>
		LCD_displayCharacter(*str);
		str++;
	}
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col){
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <LCD_goToRowColumn+0x6>
    231e:	00 d0       	rcall	.+0      	; 0x2320 <LCD_goToRowColumn+0x8>
    2320:	0f 92       	push	r0
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row){
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	3d 83       	std	Y+5, r19	; 0x05
    2332:	2c 83       	std	Y+4, r18	; 0x04
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	9d 81       	ldd	r25, Y+5	; 0x05
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	91 05       	cpc	r25, r1
    233c:	c1 f0       	breq	.+48     	; 0x236e <LCD_goToRowColumn+0x56>
    233e:	2c 81       	ldd	r18, Y+4	; 0x04
    2340:	3d 81       	ldd	r19, Y+5	; 0x05
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_goToRowColumn+0x3a>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	61 f0       	breq	.+24     	; 0x2368 <LCD_goToRowColumn+0x50>
    2350:	19 c0       	rjmp	.+50     	; 0x2384 <LCD_goToRowColumn+0x6c>
    2352:	2c 81       	ldd	r18, Y+4	; 0x04
    2354:	3d 81       	ldd	r19, Y+5	; 0x05
    2356:	22 30       	cpi	r18, 0x02	; 2
    2358:	31 05       	cpc	r19, r1
    235a:	69 f0       	breq	.+26     	; 0x2376 <LCD_goToRowColumn+0x5e>
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	9d 81       	ldd	r25, Y+5	; 0x05
    2360:	83 30       	cpi	r24, 0x03	; 3
    2362:	91 05       	cpc	r25, r1
    2364:	61 f0       	breq	.+24     	; 0x237e <LCD_goToRowColumn+0x66>
    2366:	0e c0       	rjmp	.+28     	; 0x2384 <LCD_goToRowColumn+0x6c>
		case 0:
			address = col;
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	0b c0       	rjmp	.+22     	; 0x2384 <LCD_goToRowColumn+0x6c>
			break;
		case 1:
			address = 0x40 + col;
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	80 5c       	subi	r24, 0xC0	; 192
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	07 c0       	rjmp	.+14     	; 0x2384 <LCD_goToRowColumn+0x6c>
			break;
		case 2:
			address = 0x10 + col;
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	80 5f       	subi	r24, 0xF0	; 240
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <LCD_goToRowColumn+0x6c>
			break;
		case 3:
			address = 0x50 + col;
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	80 5b       	subi	r24, 0xB0	; 176
    2382:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	LCD_sendCommand(SET_CURSOR_LOCATION | address);
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	80 68       	ori	r24, 0x80	; 128
    2388:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 *str, uint8 row, uint8 col){
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <LCD_displayStringRowColumn+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <LCD_displayStringRowColumn+0x8>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	6b 83       	std	Y+3, r22	; 0x03
    23ae:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn(row, col);
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	6c 81       	ldd	r22, Y+4	; 0x04
    23b4:	0e 94 8c 11 	call	0x2318	; 0x2318 <LCD_goToRowColumn>
	LCD_displayString(str);
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_displayString>
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_clearScreen>:

void LCD_clearScreen(){
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_sendCommand>
}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <LCD_integerToString>:

void LCD_integerToString(uint32 data){
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	64 97       	sbiw	r28, 0x14	; 20
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	69 8b       	std	Y+17, r22	; 0x11
    23f8:	7a 8b       	std	Y+18, r23	; 0x12
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ACII result */
	itoa(data,buff,10); /* 10 for decimal */
    23fe:	89 89       	ldd	r24, Y+17	; 0x11
    2400:	9a 89       	ldd	r25, Y+18	; 0x12
    2402:	9e 01       	movw	r18, r28
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	b9 01       	movw	r22, r18
    240a:	4a e0       	ldi	r20, 0x0A	; 10
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <itoa>
	LCD_displayString(buff);
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_displayString>
			break;
		case 9:
			LCD_displayCharacter('9');
			break;
	}*/
}
    241a:	64 96       	adiw	r28, 0x14	; 20
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <main>:
void buzzer(void);
void openDoor(void);
void setPW(void);
void checkPW(void);

int main(void){
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <main+0x6>
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
	uint8 byte;
	UART_init();
    2438:	0e 94 13 15 	call	0x2a26	; 0x2a26 <UART_init>
	/*LCD_init();
	LCD_displayString("123456");*/
	EEPROM_init();
    243c:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_init>

	DDRA |= (1 << PA0) | (1 << PA1);
    2440:	aa e3       	ldi	r26, 0x3A	; 58
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ea e3       	ldi	r30, 0x3A	; 58
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	83 60       	ori	r24, 0x03	; 3
    244c:	8c 93       	st	X, r24
	DDRB |= (1 << PB5) | (1 << PB6);
    244e:	a7 e3       	ldi	r26, 0x37	; 55
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e7 e3       	ldi	r30, 0x37	; 55
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 66       	ori	r24, 0x60	; 96
    245a:	8c 93       	st	X, r24

	while(1){
		byte = UART_receiveByte();
    245c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <UART_receiveByte>
    2460:	89 83       	std	Y+1, r24	; 0x01
		switch(byte){
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	3b 83       	std	Y+3, r19	; 0x03
    246a:	2a 83       	std	Y+2, r18	; 0x02
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	91 05       	cpc	r25, r1
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <main+0x7c>
    2476:	2a 81       	ldd	r18, Y+2	; 0x02
    2478:	3b 81       	ldd	r19, Y+3	; 0x03
    247a:	24 30       	cpi	r18, 0x04	; 4
    247c:	31 05       	cpc	r19, r1
    247e:	34 f4       	brge	.+12     	; 0x248c <main+0x60>
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	91 05       	cpc	r25, r1
    2488:	61 f0       	breq	.+24     	; 0x24a2 <main+0x76>
    248a:	e8 cf       	rjmp	.-48     	; 0x245c <main+0x30>
    248c:	2a 81       	ldd	r18, Y+2	; 0x02
    248e:	3b 81       	ldd	r19, Y+3	; 0x03
    2490:	24 30       	cpi	r18, 0x04	; 4
    2492:	31 05       	cpc	r19, r1
    2494:	61 f0       	breq	.+24     	; 0x24ae <main+0x82>
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	85 30       	cpi	r24, 0x05	; 5
    249c:	91 05       	cpc	r25, r1
    249e:	51 f0       	breq	.+20     	; 0x24b4 <main+0x88>
    24a0:	dd cf       	rjmp	.-70     	; 0x245c <main+0x30>
			case THIEF:
				buzzer();
    24a2:	0e 94 5d 12 	call	0x24ba	; 0x24ba <buzzer>
    24a6:	da cf       	rjmp	.-76     	; 0x245c <main+0x30>
				break;
			case OPEN_DOOR:
				openDoor();
    24a8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <openDoor>
    24ac:	d7 cf       	rjmp	.-82     	; 0x245c <main+0x30>
				break;
			case SET_PW:
				setPW();
    24ae:	0e 94 ab 14 	call	0x2956	; 0x2956 <setPW>
    24b2:	d4 cf       	rjmp	.-88     	; 0x245c <main+0x30>
				break;
			case CHECK_PW:
				checkPW();
    24b4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <checkPW>
    24b8:	d1 cf       	rjmp	.-94     	; 0x245c <main+0x30>

000024ba <buzzer>:
		}
	}
}


void buzzer(void){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	a0 97       	sbiw	r28, 0x20	; 32
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
	uint32 counter = 0;
    24ce:	1d 8e       	std	Y+29, r1	; 0x1d
    24d0:	1e 8e       	std	Y+30, r1	; 0x1e
    24d2:	1f 8e       	std	Y+31, r1	; 0x1f
    24d4:	18 a2       	std	Y+32, r1	; 0x20
    24d6:	fd c0       	rjmp	.+506    	; 0x26d2 <buzzer+0x218>
	while(counter != 20){
		SET_BIT(PORTB, PB5);
    24d8:	a8 e3       	ldi	r26, 0x38	; 56
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e8 e3       	ldi	r30, 0x38	; 56
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	80 62       	ori	r24, 0x20	; 32
    24e4:	8c 93       	st	X, r24
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	aa ef       	ldi	r26, 0xFA	; 250
    24ec:	b3 e4       	ldi	r27, 0x43	; 67
    24ee:	89 8f       	std	Y+25, r24	; 0x19
    24f0:	9a 8f       	std	Y+26, r25	; 0x1a
    24f2:	ab 8f       	std	Y+27, r26	; 0x1b
    24f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f6:	69 8d       	ldd	r22, Y+25	; 0x19
    24f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a e7       	ldi	r20, 0x7A	; 122
    2504:	53 e4       	ldi	r21, 0x43	; 67
    2506:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8d 8b       	std	Y+21, r24	; 0x15
    2510:	9e 8b       	std	Y+22, r25	; 0x16
    2512:	af 8b       	std	Y+23, r26	; 0x17
    2514:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <buzzer+0x7e>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	3f c0       	rjmp	.+126    	; 0x25b6 <buzzer+0xfc>
	else if (__tmp > 65535)
    2538:	6d 89       	ldd	r22, Y+21	; 0x15
    253a:	7e 89       	ldd	r23, Y+22	; 0x16
    253c:	8f 89       	ldd	r24, Y+23	; 0x17
    253e:	98 8d       	ldd	r25, Y+24	; 0x18
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	3f ef       	ldi	r19, 0xFF	; 255
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	57 e4       	ldi	r21, 0x47	; 71
    2548:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    254c:	18 16       	cp	r1, r24
    254e:	4c f5       	brge	.+82     	; 0x25a2 <buzzer+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	69 8d       	ldd	r22, Y+25	; 0x19
    2552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <buzzer+0xde>
    257a:	89 e1       	ldi	r24, 0x19	; 25
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
    2582:	89 89       	ldd	r24, Y+17	; 0x11
    2584:	9a 89       	ldd	r25, Y+18	; 0x12
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <buzzer+0xcc>
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	69 f7       	brne	.-38     	; 0x257a <buzzer+0xc0>
    25a0:	14 c0       	rjmp	.+40     	; 0x25ca <buzzer+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	6d 89       	ldd	r22, Y+21	; 0x15
    25a4:	7e 89       	ldd	r23, Y+22	; 0x16
    25a6:	8f 89       	ldd	r24, Y+23	; 0x17
    25a8:	98 8d       	ldd	r25, Y+24	; 0x18
    25aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	8b 89       	ldd	r24, Y+19	; 0x13
    25b8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ba:	98 8b       	std	Y+16, r25	; 0x10
    25bc:	8f 87       	std	Y+15, r24	; 0x0f
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	98 89       	ldd	r25, Y+16	; 0x10
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <buzzer+0x108>
    25c6:	98 8b       	std	Y+16, r25	; 0x10
    25c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		CLEAR_BIT(PORTB, PB5);
    25ca:	a8 e3       	ldi	r26, 0x38	; 56
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e8 e3       	ldi	r30, 0x38	; 56
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8f 7d       	andi	r24, 0xDF	; 223
    25d6:	8c 93       	st	X, r24
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	aa ef       	ldi	r26, 0xFA	; 250
    25de:	b3 e4       	ldi	r27, 0x43	; 67
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
    25e4:	ad 87       	std	Y+13, r26	; 0x0d
    25e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	53 e4       	ldi	r21, 0x43	; 67
    25f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8f 83       	std	Y+7, r24	; 0x07
    2602:	98 87       	std	Y+8, r25	; 0x08
    2604:	a9 87       	std	Y+9, r26	; 0x09
    2606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <buzzer+0x170>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <buzzer+0x1ee>
	else if (__tmp > 65535)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <buzzer+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	0f c0       	rjmp	.+30     	; 0x268a <buzzer+0x1d0>
    266c:	89 e1       	ldi	r24, 0x19	; 25
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <buzzer+0x1be>
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <buzzer+0x1b2>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <buzzer+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <buzzer+0x1fa>
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		counter++;
    26bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    26c2:	b8 a1       	ldd	r27, Y+32	; 0x20
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	a1 1d       	adc	r26, r1
    26c8:	b1 1d       	adc	r27, r1
    26ca:	8d 8f       	std	Y+29, r24	; 0x1d
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	af 8f       	std	Y+31, r26	; 0x1f
    26d0:	b8 a3       	std	Y+32, r27	; 0x20
}


void buzzer(void){
	uint32 counter = 0;
	while(counter != 20){
    26d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    26d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    26da:	84 31       	cpi	r24, 0x14	; 20
    26dc:	91 05       	cpc	r25, r1
    26de:	a1 05       	cpc	r26, r1
    26e0:	b1 05       	cpc	r27, r1
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <buzzer+0x22c>
    26e4:	f9 ce       	rjmp	.-526    	; 0x24d8 <buzzer+0x1e>
		_delay_ms(500);
		CLEAR_BIT(PORTB, PB5);
		_delay_ms(500);
		counter++;
	}
}
    26e6:	a0 96       	adiw	r28, 0x20	; 32
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <openDoor>:

void openDoor(void){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	6c 97       	sbiw	r28, 0x1c	; 28
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(PORTA, PA0);
    270c:	ab e3       	ldi	r26, 0x3B	; 59
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	eb e3       	ldi	r30, 0x3B	; 59
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	81 60       	ori	r24, 0x01	; 1
    2718:	8c 93       	st	X, r24
	SET_BIT(PORTB, PB6);
    271a:	a8 e3       	ldi	r26, 0x38	; 56
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 e3       	ldi	r30, 0x38	; 56
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 64       	ori	r24, 0x40	; 64
    2726:	8c 93       	st	X, r24
	CLEAR_BIT(PORTA, PA1);
    2728:	ab e3       	ldi	r26, 0x3B	; 59
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	eb e3       	ldi	r30, 0x3B	; 59
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8d 7f       	andi	r24, 0xFD	; 253
    2734:	8c 93       	st	X, r24
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	aa e7       	ldi	r26, 0x7A	; 122
    273c:	b4 e4       	ldi	r27, 0x44	; 68
    273e:	89 8f       	std	Y+25, r24	; 0x19
    2740:	9a 8f       	std	Y+26, r25	; 0x1a
    2742:	ab 8f       	std	Y+27, r26	; 0x1b
    2744:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	69 8d       	ldd	r22, Y+25	; 0x19
    2748:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	53 e4       	ldi	r21, 0x43	; 67
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8d 8b       	std	Y+21, r24	; 0x15
    2760:	9e 8b       	std	Y+22, r25	; 0x16
    2762:	af 8b       	std	Y+23, r26	; 0x17
    2764:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2766:	6d 89       	ldd	r22, Y+21	; 0x15
    2768:	7e 89       	ldd	r23, Y+22	; 0x16
    276a:	8f 89       	ldd	r24, Y+23	; 0x17
    276c:	98 8d       	ldd	r25, Y+24	; 0x18
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <openDoor+0x90>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 8b       	std	Y+20, r25	; 0x14
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <openDoor+0x10e>
	else if (__tmp > 65535)
    2788:	6d 89       	ldd	r22, Y+21	; 0x15
    278a:	7e 89       	ldd	r23, Y+22	; 0x16
    278c:	8f 89       	ldd	r24, Y+23	; 0x17
    278e:	98 8d       	ldd	r25, Y+24	; 0x18
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <openDoor+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	69 8d       	ldd	r22, Y+25	; 0x19
    27a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <openDoor+0xf0>
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a 8b       	std	Y+18, r25	; 0x12
    27d0:	89 8b       	std	Y+17, r24	; 0x11
    27d2:	89 89       	ldd	r24, Y+17	; 0x11
    27d4:	9a 89       	ldd	r25, Y+18	; 0x12
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <openDoor+0xde>
    27da:	9a 8b       	std	Y+18, r25	; 0x12
    27dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ea:	9c 89       	ldd	r25, Y+20	; 0x14
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <openDoor+0xd2>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <openDoor+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	8f 87       	std	Y+15, r24	; 0x0f
    280e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2810:	98 89       	ldd	r25, Y+16	; 0x10
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <openDoor+0x11a>
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLEAR_BIT(PORTA, PA0);
    281a:	ab e3       	ldi	r26, 0x3B	; 59
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	eb e3       	ldi	r30, 0x3B	; 59
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8e 7f       	andi	r24, 0xFE	; 254
    2826:	8c 93       	st	X, r24
	SET_BIT(PORTA, PA1);
    2828:	ab e3       	ldi	r26, 0x3B	; 59
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	eb e3       	ldi	r30, 0x3B	; 59
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	82 60       	ori	r24, 0x02	; 2
    2834:	8c 93       	st	X, r24
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	aa e7       	ldi	r26, 0x7A	; 122
    283c:	b4 e4       	ldi	r27, 0x44	; 68
    283e:	8b 87       	std	Y+11, r24	; 0x0b
    2840:	9c 87       	std	Y+12, r25	; 0x0c
    2842:	ad 87       	std	Y+13, r26	; 0x0d
    2844:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a e7       	ldi	r20, 0x7A	; 122
    2854:	53 e4       	ldi	r21, 0x43	; 67
    2856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8f 83       	std	Y+7, r24	; 0x07
    2860:	98 87       	std	Y+8, r25	; 0x08
    2862:	a9 87       	std	Y+9, r26	; 0x09
    2864:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <openDoor+0x190>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <openDoor+0x20e>
	else if (__tmp > 65535)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <openDoor+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <openDoor+0x1f0>
    28ca:	89 e1       	ldi	r24, 0x19	; 25
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <openDoor+0x1de>
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <openDoor+0x1d2>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <openDoor+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <openDoor+0x21a>
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLEAR_BIT(PORTA, PA0);
    291a:	ab e3       	ldi	r26, 0x3B	; 59
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	eb e3       	ldi	r30, 0x3B	; 59
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8e 7f       	andi	r24, 0xFE	; 254
    2926:	8c 93       	st	X, r24
	CLEAR_BIT(PORTA, PA1);
    2928:	ab e3       	ldi	r26, 0x3B	; 59
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	eb e3       	ldi	r30, 0x3B	; 59
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8d 7f       	andi	r24, 0xFD	; 253
    2934:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, PB6);
    2936:	a8 e3       	ldi	r26, 0x38	; 56
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 e3       	ldi	r30, 0x38	; 56
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	8f 7b       	andi	r24, 0xBF	; 191
    2942:	8c 93       	st	X, r24
}
    2944:	6c 96       	adiw	r28, 0x1c	; 28
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <setPW>:

void setPW(void){
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	a2 97       	sbiw	r28, 0x22	; 34
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
	uint8 password1[17], password2[17];
	UART_receiveString(password1);
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <UART_receiveString>
	while(UART_receiveByte() != SET_PW);
    2972:	0e 94 44 15 	call	0x2a88	; 0x2a88 <UART_receiveByte>
    2976:	84 30       	cpi	r24, 0x04	; 4
    2978:	e1 f7       	brne	.-8      	; 0x2972 <setPW+0x1c>
	UART_receiveString(password2);
    297a:	ce 01       	movw	r24, r28
    297c:	42 96       	adiw	r24, 0x12	; 18
    297e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <UART_receiveString>
	if(strcmp(password1, password2) == 0){
    2982:	9e 01       	movw	r18, r28
    2984:	2e 5e       	subi	r18, 0xEE	; 238
    2986:	3f 4f       	sbci	r19, 0xFF	; 255
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	b9 01       	movw	r22, r18
    298e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcmp>
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	61 f4       	brne	.+24     	; 0x29ae <setPW+0x58>
		UART_sendByte(DONE);
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <UART_sendByte>
		EEPROM_writeString(PW_ADDRR, password1);
    299c:	80 e5       	ldi	r24, 0x50	; 80
    299e:	92 e0       	ldi	r25, 0x02	; 2
    29a0:	9e 01       	movw	r18, r28
    29a2:	2f 5f       	subi	r18, 0xFF	; 255
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 45 06 	call	0xc8a	; 0xc8a <EEPROM_writeString>
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <setPW+0x5e>
	}
	else{
		UART_sendByte(NOT_DONE);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <UART_sendByte>
	}
}
    29b4:	a2 96       	adiw	r28, 0x22	; 34
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <checkPW>:

void checkPW(void){
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	a2 97       	sbiw	r28, 0x22	; 34
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
	uint8 password1[17], password2[17];
	UART_receiveString(password1);
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	0e 94 6f 15 	call	0x2ade	; 0x2ade <UART_receiveString>
	/*LCD_clearScreen();
	LCD_displayString("Here!!");*/
	EEPROM_readString(PW_ADDRR, password2);
    29e2:	9e 01       	movw	r18, r28
    29e4:	2e 5e       	subi	r18, 0xEE	; 238
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	80 e5       	ldi	r24, 0x50	; 80
    29ea:	92 e0       	ldi	r25, 0x02	; 2
    29ec:	b9 01       	movw	r22, r18
    29ee:	0e 94 6a 07 	call	0xed4	; 0xed4 <EEPROM_readString>
	/*LCD_clearScreen();
	LCD_displayString(password1);
	LCD_goToRowColumn(1, 0);
	LCD_displayString(password2);*/
	if(strcmp(password1, password2) == 0){
    29f2:	9e 01       	movw	r18, r28
    29f4:	2e 5e       	subi	r18, 0xEE	; 238
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	ce 01       	movw	r24, r28
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	b9 01       	movw	r22, r18
    29fe:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strcmp>
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	21 f4       	brne	.+8      	; 0x2a0e <checkPW+0x48>
		UART_sendByte(DONE);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <UART_sendByte>
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <checkPW+0x4e>
	}
	else{
		UART_sendByte(NOT_DONE);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <UART_sendByte>
	}
}
    2a14:	a2 96       	adiw	r28, 0x22	; 34
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <UART_init>:
#include "uart.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)


void UART_init(void){
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * U2X = 1 for double transmission speed
	 */
	UCSRA = (1 << U2X);
    2a2e:	eb e2       	ldi	r30, 0x2B	; 43
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2a36:	ea e2       	ldi	r30, 0x2A	; 42
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	88 e1       	ldi	r24, 0x18	; 24
    2a3c:	80 83       	st	Z, r24
	 * UPM   = 0 : Parity mode is off
	 * USBS  = 0 : one stop bit
	 * UCPOL = x : clock used for Synchronous only
	 * UCSZ  = 3 : 8 bit mode
	 */
	UCSRC = (1 << URSEL) |  (1 << UCSZ1) | (1 << UCSZ0);
    2a3e:	e0 e4       	ldi	r30, 0x40	; 64
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	86 e8       	ldi	r24, 0x86	; 134
    2a44:	80 83       	st	Z, r24
	/*
	 * Sets MSB of the UBRR to 0 to write
	 * writs BAUD_PRESCALE in the UBRR for baud rate of 9600
	 */
	UBRRH = 103 >> 8;
    2a46:	e0 e4       	ldi	r30, 0x40	; 64
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	10 82       	st	Z, r1
	UBRRL = 103;
    2a4c:	e9 e2       	ldi	r30, 0x29	; 41
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	87 e6       	ldi	r24, 0x67	; 103
    2a52:	80 83       	st	Z, r24
}
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <UART_sendByte>:

void UART_sendByte(const uint8 data){
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	0f 92       	push	r0
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, TXC));
	SET_BIT(UCSRA, TXC);
	UDR = data;
	*/

	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2a66:	eb e2       	ldi	r30, 0x2B	; 43
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	80 72       	andi	r24, 0x20	; 32
    2a72:	90 70       	andi	r25, 0x00	; 0
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	b9 f3       	breq	.-18     	; 0x2a66 <UART_sendByte+0xc>
	UDR = data;
    2a78:	ec e2       	ldi	r30, 0x2C	; 44
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	80 83       	st	Z, r24

}
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    2a90:	eb e2       	ldi	r30, 0x2B	; 43
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	88 23       	and	r24, r24
    2a98:	dc f7       	brge	.-10     	; 0x2a90 <UART_receiveByte+0x8>
	return UDR;
    2a9a:	ec e2       	ldi	r30, 0x2C	; 44
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
}
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <UART_sendString>:

void UART_sendString(uint8 *str){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <UART_sendString+0x6>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	0a c0       	rjmp	.+20     	; 0x2aca <UART_sendString+0x24>
	while(*str != '\0'){
		UART_sendByte(*str);
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	80 81       	ld	r24, Z
    2abc:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <UART_sendByte>
		str++;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	01 96       	adiw	r24, 0x01	; 1
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, RXC));
	return UDR;
}

void UART_sendString(uint8 *str){
	while(*str != '\0'){
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 23       	and	r24, r24
    2ad2:	89 f7       	brne	.-30     	; 0x2ab6 <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
}
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <UART_receiveString>:

void UART_receiveString(uint8 *str){
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <UART_receiveString+0x6>
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
	*str = UART_receiveByte();
    2aec:	0e 94 44 15 	call	0x2a88	; 0x2a88 <UART_receiveByte>
    2af0:	e9 81       	ldd	r30, Y+1	; 0x01
    2af2:	fa 81       	ldd	r31, Y+2	; 0x02
    2af4:	80 83       	st	Z, r24
    2af6:	0a c0       	rjmp	.+20     	; 0x2b0c <UART_receiveString+0x2e>
	while(*str != '#'){
		str++;
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	01 96       	adiw	r24, 0x01	; 1
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
		*str = UART_receiveByte();
    2b02:	0e 94 44 15 	call	0x2a88	; 0x2a88 <UART_receiveByte>
    2b06:	e9 81       	ldd	r30, Y+1	; 0x01
    2b08:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0a:	80 83       	st	Z, r24
	}
}

void UART_receiveString(uint8 *str){
	*str = UART_receiveByte();
	while(*str != '#'){
    2b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b10:	80 81       	ld	r24, Z
    2b12:	83 32       	cpi	r24, 0x23	; 35
    2b14:	89 f7       	brne	.-30     	; 0x2af8 <UART_receiveString+0x1a>
		str++;
		*str = UART_receiveByte();
	}
	*str = '\0';
    2b16:	e9 81       	ldd	r30, Y+1	; 0x01
    2b18:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1a:	10 82       	st	Z, r1
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <__prologue_saves__>:
    2b26:	2f 92       	push	r2
    2b28:	3f 92       	push	r3
    2b2a:	4f 92       	push	r4
    2b2c:	5f 92       	push	r5
    2b2e:	6f 92       	push	r6
    2b30:	7f 92       	push	r7
    2b32:	8f 92       	push	r8
    2b34:	9f 92       	push	r9
    2b36:	af 92       	push	r10
    2b38:	bf 92       	push	r11
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	ff 92       	push	r15
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	ca 1b       	sub	r28, r26
    2b50:	db 0b       	sbc	r29, r27
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	09 94       	ijmp

00002b5e <__epilogue_restores__>:
    2b5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b60:	39 88       	ldd	r3, Y+17	; 0x11
    2b62:	48 88       	ldd	r4, Y+16	; 0x10
    2b64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b70:	b9 84       	ldd	r11, Y+9	; 0x09
    2b72:	c8 84       	ldd	r12, Y+8	; 0x08
    2b74:	df 80       	ldd	r13, Y+7	; 0x07
    2b76:	ee 80       	ldd	r14, Y+6	; 0x06
    2b78:	fd 80       	ldd	r15, Y+5	; 0x05
    2b7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b80:	b9 81       	ldd	r27, Y+1	; 0x01
    2b82:	ce 0f       	add	r28, r30
    2b84:	d1 1d       	adc	r29, r1
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	ed 01       	movw	r28, r26
    2b92:	08 95       	ret

00002b94 <strcmp>:
    2b94:	fb 01       	movw	r30, r22
    2b96:	dc 01       	movw	r26, r24
    2b98:	8d 91       	ld	r24, X+
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	80 19       	sub	r24, r0
    2b9e:	01 10       	cpse	r0, r1
    2ba0:	d9 f3       	breq	.-10     	; 0x2b98 <strcmp+0x4>
    2ba2:	99 0b       	sbc	r25, r25
    2ba4:	08 95       	ret

00002ba6 <itoa>:
    2ba6:	fb 01       	movw	r30, r22
    2ba8:	9f 01       	movw	r18, r30
    2baa:	e8 94       	clt
    2bac:	42 30       	cpi	r20, 0x02	; 2
    2bae:	c4 f0       	brlt	.+48     	; 0x2be0 <itoa+0x3a>
    2bb0:	45 32       	cpi	r20, 0x25	; 37
    2bb2:	b4 f4       	brge	.+44     	; 0x2be0 <itoa+0x3a>
    2bb4:	4a 30       	cpi	r20, 0x0A	; 10
    2bb6:	29 f4       	brne	.+10     	; 0x2bc2 <itoa+0x1c>
    2bb8:	97 fb       	bst	r25, 7
    2bba:	1e f4       	brtc	.+6      	; 0x2bc2 <itoa+0x1c>
    2bbc:	90 95       	com	r25
    2bbe:	81 95       	neg	r24
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	64 2f       	mov	r22, r20
    2bc4:	77 27       	eor	r23, r23
    2bc6:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__udivmodhi4>
    2bca:	80 5d       	subi	r24, 0xD0	; 208
    2bcc:	8a 33       	cpi	r24, 0x3A	; 58
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <itoa+0x2c>
    2bd0:	89 5d       	subi	r24, 0xD9	; 217
    2bd2:	81 93       	st	Z+, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	a1 f7       	brne	.-24     	; 0x2bc2 <itoa+0x1c>
    2bda:	16 f4       	brtc	.+4      	; 0x2be0 <itoa+0x3a>
    2bdc:	5d e2       	ldi	r21, 0x2D	; 45
    2bde:	51 93       	st	Z+, r21
    2be0:	10 82       	st	Z, r1
    2be2:	c9 01       	movw	r24, r18
    2be4:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <strrev>

00002be8 <strrev>:
    2be8:	dc 01       	movw	r26, r24
    2bea:	fc 01       	movw	r30, r24
    2bec:	67 2f       	mov	r22, r23
    2bee:	71 91       	ld	r23, Z+
    2bf0:	77 23       	and	r23, r23
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <strrev+0x4>
    2bf4:	32 97       	sbiw	r30, 0x02	; 2
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <strrev+0x18>
    2bf8:	7c 91       	ld	r23, X
    2bfa:	6d 93       	st	X+, r22
    2bfc:	70 83       	st	Z, r23
    2bfe:	62 91       	ld	r22, -Z
    2c00:	ae 17       	cp	r26, r30
    2c02:	bf 07       	cpc	r27, r31
    2c04:	c8 f3       	brcs	.-14     	; 0x2bf8 <strrev+0x10>
    2c06:	08 95       	ret

00002c08 <__udivmodhi4>:
    2c08:	aa 1b       	sub	r26, r26
    2c0a:	bb 1b       	sub	r27, r27
    2c0c:	51 e1       	ldi	r21, 0x11	; 17
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <__udivmodhi4_ep>

00002c10 <__udivmodhi4_loop>:
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	a6 17       	cp	r26, r22
    2c16:	b7 07       	cpc	r27, r23
    2c18:	10 f0       	brcs	.+4      	; 0x2c1e <__udivmodhi4_ep>
    2c1a:	a6 1b       	sub	r26, r22
    2c1c:	b7 0b       	sbc	r27, r23

00002c1e <__udivmodhi4_ep>:
    2c1e:	88 1f       	adc	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	5a 95       	dec	r21
    2c24:	a9 f7       	brne	.-22     	; 0x2c10 <__udivmodhi4_loop>
    2c26:	80 95       	com	r24
    2c28:	90 95       	com	r25
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
